name: Daily Random Commit

on:
  schedule:
    - cron: '0 10 * * *'  # UTC 10:00 对应北京时间 18:00

jobs:
  daily-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "jvbaoge1"
          git config user.email "shhshz1@163.com"

      - name: Sleep random hours and minutes
        run: |
          RANDOM_HOUR=$(( RANDOM % 6 ))
          RANDOM_MIN=$(( RANDOM % 60 ))
          TOTAL_SEC=$(( RANDOM_HOUR*3600 + RANDOM_MIN*60 ))
          echo "Sleeping for $RANDOM_HOUR hours and $RANDOM_MIN minutes ($TOTAL_SEC seconds)..."
          sleep $TOTAL_SEC

      - name: Update README with ultra-realistic pseudo code commits
        run: |
          FILE="README.md"
          TODAY=$(date '+%Y-%m-%d')
          TIME=$(date '+%H:%M:%S')

          # 创建 README.md 如果不存在
          if [ ! -f $FILE ]; then
            echo "# My Daily Commit Log" > $FILE
          fi

          # 检查今天是否已经提交
          if grep -q "$TODAY" $FILE; then
            echo "Today's commit already done"
            exit 0
          fi

          # 日志和 emoji
          MESSAGES=("优化了代码" "修复Bug" "提交练习" "更新README" "写脚本" "重构模块" "调试逻辑" "增加测试")
          EMOJIS=("🔥" "💻" "🚀" "📝" "📦" "🎯" "🔧" "⚡")

          # 基础伪代码模板
          BASE_PSEUDO=("VAR = FUNC(VAR1, VAR2)" "if COND: FUNC2(VAR)" "for ITEM in LIST: PROCESS(ITEM)" "while COND: FUNC(VAR)" "class CLASS: def METHOD(self): PASS" "try: FUNC(VAR) except ERROR: HANDLE(VAR)" "RESULT = FUNC(VAR1, VAR2)" "def FUNC(VAR): return VAR*NUM")

          # 随机生成段落数 2~5
          NUM_PARAGRAPHS=$(( RANDOM % 4 + 2 ))

          for p in $(seq 1 $NUM_PARAGRAPHS); do
            PARAGRAPH_CONTENT=""
            # 随机生成每段的行数 1~6
            NUM_LINES=$(( RANDOM % 6 + 1 ))
            for l in $(seq 1 $NUM_LINES); do
              TEMPLATE=${BASE_PSEUDO[$(( RANDOM % ${#BASE_PSEUDO[@]} ))]}
              
              # 随机变量名、函数名、类名、条件
              VAR="v$((RANDOM % 100))"
              VAR1="v$((RANDOM % 100))"
              VAR2="v$((RANDOM % 100))"
              NUM=$((RANDOM % 50 + 1))
              FUNC="func$((RANDOM % 20))"
              FUNC2="func$((RANDOM % 20))"
              COND="cond$((RANDOM % 20))"
              CLASS="Class$((RANDOM % 20))"
              METHOD="method$((RANDOM % 20))"
              ERROR="Error$((RANDOM % 20))"
              LIST="list$((RANDOM % 20))"
              ITEM="item$((RANDOM % 50))"
              RESULT="result$((RANDOM % 50))"
              HANDLE="handle$((RANDOM % 20))"

              LINE=$(echo $TEMPLATE | sed "s/VAR/$VAR/g; s/VAR1/$VAR1/g; s/VAR2/$VAR2/g; s/NUM/$NUM/g; s/FUNC/$FUNC/g; s/FUNC2/$FUNC2/g; s/COND/$COND/g; s/CLASS/$CLASS/g; s/METHOD/$METHOD/g; s/ERROR/$ERROR/g; s/LIST/$LIST/g; s/ITEM/$ITEM/g; s/RESULT/$RESULT/g; s/HANDLE/$HANDLE/g")

              # 随机增加注释
              if [ $(( RANDOM % 2 )) -eq 0 ]; then
                COMMENT="# TODO: review logic $((RANDOM % 100))"
                LINE="$LINE $COMMENT"
              fi

              # 随机嵌套
              NEST=$(( RANDOM % 3 ))
              if [ $NEST -eq 0 ]; then
                LINE="if $COND:\n  $LINE"
              elif [ $NEST -eq 1 ]; then
                LINE="for $ITEM in $LIST:\n  $LINE"
              fi

              # 拼接段落内容
              PARAGRAPH_CONTENT="$PARAGRAPH_CONTENT\n  $LINE"
            done

            # 段落前加标题
            PARAGRAPH_CONTENT="- [$TODAY $TIME] Pseudo code paragraph:"
            # 随机附加日志 + emoji
            if [ $(( RANDOM % 2 )) -eq 0 ]; then
              MSG=${MESSAGES[$(( RANDOM % ${#MESSAGES[@]} ))]}
              EMO=${EMOJIS[$(( RANDOM % ${#EMOJIS[@]} ))]}
              PARAGRAPH_CONTENT="$PARAGRAPH_CONTENT\n  Note: $MSG $EMO"
            fi

            echo -e "$PARAGRAPH_CONTENT" >> $FILE
          done

          git add $FILE
          git commit -m "Daily commit: $TODAY"
          git push
